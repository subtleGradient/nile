ometa NileParser {

// Helper rules
range :x :y   = char:c ?(x <= c && c <= y)   -> c ,
class :s      = char:c ?(s.indexOf(c) != -1) -> c,
token :xs     = seq(xs) ,

// Lexical rules
CRLF          = "\n""\r"* | "\r""\n"* ,
_             = " "* ,
LPAREN        = "("_ ,
RPAREN        = _")" ,
COMMA         = _","_ EOL* ,
COLON         = _":"_ ,
RARROW        = _("→" | "->")_ EOL* ,
FOREACH       = ("∀" | "for"_"each" | "for"_"all")_ ,
PRIME         = "′" | "'" ,
comment       = "--" (~CRLF anything)* ,
opsym1        = class("∧∨") ,
opsym2        = class("<>≤≥≠=≈≉") ,
opsym3        = ~opsym1 ~opsym2 ~opsym4
              ( class("-~!@#$^&*+|¬²³‖⌈⌉⌊⌋▷◁⟂") | range("\u2201", "\u221D") |
                range("\u221F", "\u22FF") | "?" | "[" | "]"
              ) ,
opsym4        = class("/∙×%") ,
opsym         = opsym1 | opsym2 | opsym3 | opsym4 ,
alpha         = range("A", "Z") | range("a", "z")
              | range("\u0370", "\u03FF") ,
digit         = range("0", "9") ,
alphanum      = alpha | digit ,
numliteral    = <digit+ ("." digit+)?> | "∞" ,
typename      = <alphanum+> ,
processname   = <alphanum+> ,
opname        = ~"--" ~"<<" ~">>"
                <opsym+ | "\\"alphanum+> ,
varname       = <alpha alphanum* PRIME?> ,
null          = -> null ,

// Indentation rules
EOL           = _ comment? CRLF _:spaces -> (self.col = spaces.length),
indentation   =                          -> (self.col) ,
atIndent   :i = EOL+                       ?(i == self.col) ,
pastIndent :i = EOL+                       ?(i  < self.col) ,

// Types
simpletype    = tupletype | recordtype
              | typename:n                                     -> nile.typeref(n) ,
type          = processtype | simpletype ,
typedvar      = varname:n COLON type:t                         -> nile.vardecl(n, t) ,
tupletype     = LPAREN     type:t1 (COMMA     type)+:ts RPAREN -> nile.tupletype (cons(t1, ts)) ,
recordtype    = LPAREN typedvar:f1 (COMMA typedvar)+:fs RPAREN -> nile.recordtype(cons(f1, fs)) ,
processtype   = simpletype:intype _">>"_ simpletype:outtype    -> nile.processtype(intype, outtype)
              | LPAREN processtype:t RPAREN                    -> t ,

// Primary expressions
numexpr       = numliteral:v                            -> nile.numexpr(v) ,
varexpr       = varname:n                               -> nile.varexpr(n) ,
parenexpr     = LPAREN expr:e RPAREN                    -> e ,
tupleexpr     = LPAREN expr?:e1 (COMMA expr)*:es RPAREN -> nile.tupleexpr(e1 ? cons(e1, es) : es) ,
condcase      = expr:v COMMA "if "_ expr:c (EOL+|_";"_) -> nile.condcase(v, c) ,
condexpr      = "{"_ condcase+:cs
                     expr:d (COMMA "otherwise")? _"}"   -> nile.condexpr(cs, d) ,
primaryexpr   = numexpr | varexpr | parenexpr | tupleexpr | condexpr ,

recfieldexpr  = recfieldexpr:r "." varname:f -> nile.recfieldexpr(r, f)
              | primaryexpr ,

// Operation expressions
opexpr6       = opname:n1 recfieldexpr:a  opname:n2 -> nile.opexpr(n1+n2, `out,  a)
              | opname:n  recfieldexpr:a            -> nile.opexpr(n,     `pre,  a)
              |           recfieldexpr:a  opname:n  -> nile.opexpr(n,     `post, a)
              |           recfieldexpr ,
opexpr5       = opexpr5:a " "*           null:n      opexpr6:b -> nile.opexpr(n, `in, [a, b]) | opexpr6 ,
opexpr4       = opexpr4:a " "+ &opsym4 opname:n " "+ opexpr5:b -> nile.opexpr(n, `in, [a, b]) | opexpr5 ,
opexpr3       = opexpr3:a " "+ &opsym3 opname:n " "+ opexpr4:b -> nile.opexpr(n, `in, [a, b]) | opexpr4 ,
opexpr2       = opexpr2:a " "+ &opsym2 opname:n " "+ opexpr3:b -> nile.opexpr(n, `in, [a, b]) | opexpr3 ,
opexpr1       = opexpr1:a " "+ &opsym1 opname:n " "+ opexpr2:b -> nile.opexpr(n, `in, [a, b]) | opexpr2 ,

// Variable juxtaposition
shortvarname  = <alpha digit* "'"?> ,
shortvarexpr  = shortvarname:n                       -> nile.varexpr(n) ,
juxedvars     = juxedvars:a    null:n shortvarexpr:b -> nile.opexpr(n, `in, [a, b])
              | shortvarexpr:a null:n shortvarexpr:b -> nile.opexpr(n, `in, [a, b]) ,
juxedvarsonly = juxedvars:v spaces end               -> v ,

// Process pipelines
processinst   = processname:n _ tupleexpr:arg        -> nile.processinst(n, arg) ,
process       = processinst
              | varname:n                            -> nile.varexpr(n) ,
pipeline      = RARROW process:p (pipeline | null):c -> nile.pipeline(p, c) ,

expr          = pipeline | opexpr1 ,

// Patterns and variable definitions
varpat        = typedvar
              | (varname | "_" ):n                            -> nile.vardecl(n, nile.anytype())
              | LPAREN varpat:p RPAREN                        -> p ,
tuplepat      = LPAREN pattern?:e1 (COMMA pattern)*:es RPAREN -> nile.tuplepat(e1 ? cons(e1, es) : es) ,
pattern       = varpat | tuplepat ,
vardef        = pattern:p _"="_ expr:v                        -> nile.vardef(p, v) ,

// In/out statements
instmt        = "<<"_ expr:v1 (_"<<"_ expr)*:vs -> nile.instmt (cons(v1, vs)) ,
outstmt       = ">>"_ expr:v1 (_">>"_ expr)*:vs -> nile.outstmt(cons(v1, vs)) ,

// Blocks
block      :i = (pastIndent(i) vardef)*:defs
                (pastIndent(i)   stmt)*:stmts -> nile.block(defs, stmts) ,
blockonly     = block(-1):b spaces end -> b ,

// If statements
elseif    :i  = atIndent(i) "else "_"if "_ ifbody(i) ,
else      :i  = atIndent(i) "else"          block(i)
              |                             block(i) ,
ifbody    :i  = expr:c block(i):t (elseif(i) | else(i)):f -> nile.ifstmt(c, t, f) ,
ifstmt        = indentation:i "if "_ ifbody(i) ,

substmt       = pipeline:p -> nile.substmt(p) ,
stmt          = instmt | outstmt | ifstmt | substmt ,

// Type definitions
typedef       = "type "_ typename:n _"="_ type:t           -> nile.typedef(n,    t)
              | "type "_ typename:n                        -> nile.typedef(n, nile.primtype()) ,

// Operation definitions
outfixsig     = opname:n1 pattern:p opname:n2 COLON simpletype:t -> nile.opsig(n1+n2, `out,  p, t) ,
prefixsig     = opname:n  pattern:p           COLON simpletype:t -> nile.opsig(n,     `pre,  p, t) ,
postfixsig    =           pattern:p opname:n  COLON simpletype:t -> nile.opsig(n,     `post, p, t) ,
infixsig      = pattern:p1 (" "+ opname | null):n " "+ pattern:p2
                                              COLON simpletype:t -> nile.opsig(n, `in, nile.tuplepat([p1, p2]), t) ,
opsig         = outfixsig | prefixsig | postfixsig | infixsig ,

opbody        = (pastIndent(0) vardef)*:defs
                 pastIndent(0)     expr:r     -> nile.opbody(defs, r)
              |                               -> null ,
opdef         = opsig:sig opbody:body         -> nile.opdef(sig, body) ,

// Process definitions
processsig    = processname:n _ tuplepat:p COLON type:t                -> nile.processsig(n, p, t) ,
prologue      = block(0) ,
processbody   = indentation:i FOREACH pattern:p block(i):s             -> nile.processbody(p, s) ,
epilogue      = block(0) ,
processdef    = processsig:s prologue:p EOL+ processbody?:b epilogue:e -> nile.processdef(s, p, b, e) ,

// Top level
definition    = typedef | processdef | opdef ,
// TODO why do we need to add the spaces rule at the end?
definitions   = (EOL* definition)*:defs EOL* spaces (end | error) -> defs

}

NileParser.error = function () {
  var input = this.input;
  var start = input.idx - 20;
  var end   = input.idx + 20;
  start = start < 0 ? 0 : start;
  end   = end > input.lst.length - 1 ? input.lst.length : end;
  var context = input.lst.slice(start, end);
  throw "Error in Nile program near: \n" + context;
}
